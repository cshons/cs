% 1. Family Tree and Relationships
parent(john, mary).
parent(john, tom).
parent(mary, alice).
parent(mary, bob).

father(john, mary).
father(john, tom).

mother(mary, alice).
mother(mary, bob).

sibling(X, Y) :- parent(Z, X), parent(Z, Y), X \= Y.
grandparent(X, Y) :- parent(X, Z), parent(Z, Y).

% 2. Concatenate two lists
conc([], L, L).
conc([H|T], L2, [H|R]) :- conc(T, L2, R).

% 3. Reverse a list
reverse([], []).
reverse([H|T], R) :- reverse(T, RT), conc(RT, [H], R).

% 4. Sum of two numbers
sum(X, Y, Z) :- Z is X + Y.

% 5. Maximum of two numbers
max(X, Y, X) :- X >= Y.
max(X, Y, Y) :- Y > X.

% 6. Factorial
factorial(0, 1).
factorial(N, F) :- N > 0, N1 is N - 1, factorial(N1, F1), F is N * F1.

% 7. Fibonacci
fib(0, 0).
fib(1, 1).
fib(N, F) :- N > 1, N1 is N - 1, N2 is N - 2, fib(N1, F1), fib(N2, F2), F is F1 + F2.

% 8. Power
power(_, 0, 1).
power(Num, Pow, Ans) :- Pow > 0, P1 is Pow - 1, power(Num, P1, A1), Ans is Num * A1.

% 9. Multiplication
multi(X, Y, R) :- R is X * Y.

% 10. Membership in a list
memb(X, [X|_]).
memb(X, [_|T]) :- memb(X, T).

% 11. Sum of list elements
sumlist([], 0).
sumlist([H|T], S) :- sumlist(T, ST), S is H + ST.

% 12. Even and Odd length
evenlength([]).
evenlength([_,_|T]) :- evenlength(T).

oddlength([_]).
oddlength([_,_|T]) :- oddlength(T).

% 13. Maximum in a list
maxlist([X], X).
maxlist([H|T], M) :- maxlist(T, MT), M is max(H, MT).

% 14. Insert at Nth position
insert(E, 1, L, [E|L]).
insert(E, N, [H|T], [H|R]) :- N > 1, N1 is N - 1, insert(E, N1, T, R).

% 15. Delete from Nth position
delete(1, [_|T], T).
delete(N, [H|T], [H|R]) :- N > 1, N1 is N - 1, delete(N1, T, R)
